For: Sorted Nodes with each node having a weights which corresponds to the frequency of its search

Does: Returns a binary search tree with minimal cost of search. 
It uses the model that cost of search for a node is proportional to its weights and its depth considering depth of root as 1.

How to:

Consider 4 nodes.

Node Index  0  1  2  3
Values      10 12 16 21
Weights     4  2  6  3


Let DP be DP[0, 3] which considers information for the minimum cost for nodes 0 to 3 in the BST (including 0 and 3).

Now root can be any one of the them 0, 1, 2, 3

Lets say 1 is the root

Total cost = Sum[0, 3] + DP[0, 0] + DP[2, 3]

Thereforce we have to assume all of them as root and find minimum.

Min Cost = Sum[0, 3] + min(DP[1,3], DP[0, 0] + DP[2, 3], DP[0, 1] + DP[3, 3], DP[0, 2])

Also, while memoizing also store the root you considered.