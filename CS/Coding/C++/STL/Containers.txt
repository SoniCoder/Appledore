Common interface for containers
size(), Copy Constructor, clear(), swap(cont)
begin(), end()
The find() in Associative Container returns end() iterator is element is not found.

I. Sequence

 1. vector - Grows in single direction
 Methods:
 size()
 push_back()
 insert(v1.end(), itr1, itr2);
 * inserts and removes invalidates pointers (new array allocated and all items tranferred)
 Initialize vector of vectors: vector<vector<int>> X(n, vector<int>(0, m))


 2. deque (Like a Deck) - Grows in both directions
 Methods:
 push_front()
 push_back()
 
 3. list - Doubly linked list implementation
 Methods:
 push_back()
 push_front()
 back()/front()
 list.insert(itr, 8)
 list.erase(itr)
 mylist1.splice(itr, mylist2, itra, itrb)
 
 
II. Associative container - always sorted 
 1. set - (BST - AVL implementation i think) No Duplicates!
 Methods:
 insert - log time - returns pair<iterator, bool> - pair.first
 insert(itr, 9) - where itr is the hint
 find - log time
 erase(val/itr)
 
 * set seems good for keeping sorted array as numbers are coming and going
 
 2. multiset - same as set but redundant vals allowed
 * dereference to iterators are read-only
 
 3. map/multimap
	map<char, int> myMap;
	myMap.insert( pair<char, int>('a', 100));
	mymap.insert (make_pair('z', 200));
	
 4. unordered_set/unordered multiset / unordered multimap
 Methods:
 find()
 load_factor() - total_elements/buckets
 bucket(x)
 bucket_count()
 
 map and unordered_map also works as associative array
 day['S']
 day.at('S')
 * Insert cannot be used to modify existing element
 * But subscript operator can be used day['S'] = "xxx"
 