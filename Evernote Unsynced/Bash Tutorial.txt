bc
echo 1 .0 + 2.0 | bc

cd
=> Issuing only cd takes to home dir
pushd and popd:  pushd /etc - Push etc to directory stack and using popd get back

compress

cut 
-d "-" -f 1,3 filename

date
Custom format:  date '+DATE:%m..'


dd
if=infile of=out conv=ucase/ebcdic
Converts data from one format to other

echo

file - Get type of file

ln
ln -s a b for soft link
Soft link - Seperate File Pointing to another file
Hard link - Multiple Files occupying same space

locate
Find all files matching the specification
updatedb - Updates database for locate

ls
ls -la:  l for long listing and a for all files

which - Get where that command is

whatis - brief explaination for a command

apropos - find relevant command

rmdir - Remove Empty Directories

less
Better version of more
=> Arrow key navigation line by line
=> Spacebar for page by page

printf

read
read -p "Your name" myvar myvar2
-s for secret

set
set param1 param2
Manually set sysargs


sort
Sort a file

source
Execute script in current process instead of a child

su
su - cindy:  Change to user cindy, switch to home and load all bash settings

tput
tput cmd
cmd=clear, lines, cols, bold, cup 15 20

umask
Default mask to be subtracted from 666 while creating a new file

uncompress

users - display logged in users

watch free -h: Run every 2 sec

wc
Lines Words Characters
-l -w -c

zcat
Cat compressed doc

----------------------------------------------------------------------

Environment Vars

/etc/profile - For global vars
source /etc/profile:  For immediate load

----------------------------------------------------------------------

Shell Scripting

declare
-r NUM1=5 #CONSTANT

Arithmetic
num3=$((NUM1+num2)) 
$((NUM1**num2))
$((NUM1%num2))
$((rand++))
$((++rand))
let i+=2
expr $a + $b
`expr 2 - 3`

Using Python
num7=1.2
num8=3.4
num9=$(python3 -c "print($num7+$num8)")

Multiline Printing
cat<<END
This line
prints a lot
END

Branching
if condition
then
echo "Then part"
elif ...
then
else
....
fi
Conditions:
mv src target
[ 1 -lt/-eq/-ge 10 -a/-o 2 -lt 10 ]
[ -f/-e/-r/-w/-x/-d filename ] File based Conditions
[ "1" = "2" ]
[ -n/z $str1 ]
((num == 10))
read line


Looping

while condition
do
...
done
IN

until condition
do
...
done

for item in iterable
do
...
done

Iterables:
{A..Z}, * string with spaces
${arr[*]}
${arr[@]}


for  (( i=0; i<=10; i=i+1))


Case
case $var in
[a-z] | [A-Z])
    echo "Lowercase"
    ;;
?)
    echo "Any other single character"
    ;;;
*)
    ;;;
esac
[6-9]|1[0-8]

Ternary
((age >= 18?(a=1):(can_vote)))

----------------------------------------------------------------------

Positional Paramters

$# - For getting number of params in set
set `cat file` - Set params manually
$* refers to all positional paramters
$? Last Exit Status
shift - shift args to left

----------------------------------------------------------------------

`echo Hello` - anything inside will be evaluated first as a command

Set file as stdin:

exec < $filename
..
exec < $oldtty
* Restoring necessary to keep receiving input from tty
* If code and no input left then parent process will exit

----------------------------------------------------------------------

Functions
youtube()
{
    local name=$1
    local num1=$2
    echo $num1
}

sum=$(youtube hritik 2)

unset youtube

----------------------------------------------------------------------

RE

pat="^[0-9]{8}$"
Condition [[ $var =~ $pat ]]
num1=${num1//[[:blank:]]/} - Replace blanks with nothing 

----------------------------------------------------------------------

Change seperator

OIFS="$IFS"
IFS=","

----------------------------------------------------------------------

Strings

Parameter Expansions:
echo "${name}'s toy"
echo "${same_string//dog/cat}" - Replace all dog with cat
echo "I am ${name:=Derek}" - If not exists then replace
${#str1} - Length

Slicing
${rand_str:2}
${rand_str:2:7}
${rand_str#*A } - Everything that follows A and Space

----------------------------------------------------------------------

Arrays

fav_nums=(3.14 2.718)
fav_nums[4]=1.2
${fav_nums[2]}
Length : ${#arr[@]}
Index 3 Length: ${#arr[3]}

Sorting
sortednums=($(for i in "${arr[@]}"; do; echo $i;done | sort))